from typing import Any, Callable, Dict, Iterable, List, Optional

from edsnlp.pipelines.base import BaseComponent
from spacy.language import Language
from spacy.tokens import Doc
from spacy.util import minibatch


class SpacyBaseModel(BaseComponent):
    # noinspection PyProtectedMember
    def __init__(
        self,
        nlp: Language,
        model_parts: Dict[str, Any],
        preprocess_size: int,
        batch_size: int,
        span_getters: Callable,
        annotation_setters: Callable,
    ):
        """
        Component used to apply any wrapped model to a stream of spaCy documents.

        Parameters
        ----------
        nlp : Language
            A spaCy language
        model : Union[str, Path, ModelWrapper]
            Either a path to a wrapped model, or the model itself
        preprocess_size : int
            Size (in number of examples) of the data given to the model
        batch_size : int
            Batch size for inference
        """

        self.nlp = nlp

        for k, v in model_parts.items():
            setattr(self, k, v)

        self.preprocess_size = preprocess_size
        self.batch_size = batch_size

        self.span_getters = span_getters
        self.annotation_setters = annotation_setters

        self.prepare()

    def set_extensions(self):
        """
        Overwrite this method to set the necessary spaCy extensions
        """
        return

    def prepare(self):
        """
        Method called when initializing the model.
        Can be overwritten
        """
        return

    def predict(
        self, data, batch_size: Optional[int] = None, **kwargs
    ) -> Dict[str, List[Any]]:
        """
        Method called to predict

        Parameters
        ----------
        data :
            data generated by the `span_getters`
        batch_size : int
            batch size

        Return
        ------
        Dict[str, List[Any]]
            The predictions that will be passed to the `annotation_setters
        """
        raise NotImplementedError("You should implement the `predict` method !")

    def spacy_predict(
        self,
        stream: Iterable[Doc],
        batch_size: int,
        **kwargs,
    ):
        self.set_extensions()
        for outer_batch in minibatch(stream, self.preprocess_size):
            data, spacy_data = self.span_getters(outer_batch)
            preds = self.predict(data, batch_size, **kwargs)
            self.annotation_setters(preds, spacy_data)
            yield from outer_batch

    def pipe(
        self,
        stream: Iterable[Doc],
        batch_size: Optional[int] = None,
    ):
        # batch_size = batch_size or self.batch_size

        yield from self.spacy_predict(
            stream,
            preprocess_size=self.preprocess_size,
            batch_size=self.batch_size,  # We don't use spaCy batch size for our ML model batch_size
        )

    def __call__(self, doc: Doc):
        return next(
            self.spacy_predict(
                [doc],
                preprocess_size=self.preprocess_size,
                batch_size=self.batch_size,
            )
        )
